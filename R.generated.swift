//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.nib` struct is generated, and contains static references to 3 nibs.
  struct nib {
    /// Nib `HomeCollectionViewCell`.
    static let homeCollectionViewCell = _R.nib._HomeCollectionViewCell()
    /// Nib `HomeViewController`.
    static let homeViewController = _R.nib._HomeViewController()
    /// Nib `PhotoDetailViewController`.
    static let photoDetailViewController = _R.nib._PhotoDetailViewController()
    
    /// `UINib(name: "HomeCollectionViewCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeCollectionViewCell) instead")
    static func homeCollectionViewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeCollectionViewCell)
    }
    
    /// `UINib(name: "HomeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.homeViewController) instead")
    static func homeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.homeViewController)
    }
    
    /// `UINib(name: "PhotoDetailViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.photoDetailViewController) instead")
    static func photoDetailViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoDetailViewController)
    }
    
    static func homeCollectionViewCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCollectionViewCell? {
      return R.nib.homeCollectionViewCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCollectionViewCell
    }
    
    static func homeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.homeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    static func photoDetailViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.photoDetailViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `HomeCollectionViewCell`.
    static let homeCollectionViewCell: Rswift.ReuseIdentifier<HomeCollectionViewCell> = Rswift.ReuseIdentifier(identifier: "HomeCollectionViewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 8 localization keys.
    struct localizable {
      /// en translation: Erro
      /// 
      /// Locales: en
      static let titleError = Rswift.StringResource(key: "TitleError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Não foi possível conectar com o servidor. Por favor, verifique a sua conexão com a internet e tente novamente.
      /// 
      /// Locales: en
      static let noInternet = Rswift.StringResource(key: "NoInternet", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: OK
      /// 
      /// Locales: en
      static let titleOK = Rswift.StringResource(key: "TitleOK", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Ocorreu um erro inesperado. Por favor, tente novamente.
      /// 
      /// Locales: en
      static let genericMessageError = Rswift.StringResource(key: "GenericMessageError", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pagina do Autor
      /// 
      /// Locales: en
      static let photoDetailAuthorButtonText = Rswift.StringResource(key: "PhotoDetailAuthorButtonText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pagina do Post
      /// 
      /// Locales: en
      static let photoDetailPostButtonText = Rswift.StringResource(key: "PhotoDetailPostButtonText", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Pic Sum
      /// 
      /// Locales: en
      static let homeTitle = Rswift.StringResource(key: "HomeTitle", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      /// en translation: Sucesso
      /// 
      /// Locales: en
      static let titleSuccess = Rswift.StringResource(key: "TitleSuccess", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en"], comment: nil)
      
      /// en translation: Erro
      /// 
      /// Locales: en
      static func titleError(_: Void = ()) -> String {
        return NSLocalizedString("TitleError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Não foi possível conectar com o servidor. Por favor, verifique a sua conexão com a internet e tente novamente.
      /// 
      /// Locales: en
      static func noInternet(_: Void = ()) -> String {
        return NSLocalizedString("NoInternet", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: OK
      /// 
      /// Locales: en
      static func titleOK(_: Void = ()) -> String {
        return NSLocalizedString("TitleOK", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Ocorreu um erro inesperado. Por favor, tente novamente.
      /// 
      /// Locales: en
      static func genericMessageError(_: Void = ()) -> String {
        return NSLocalizedString("GenericMessageError", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pagina do Autor
      /// 
      /// Locales: en
      static func photoDetailAuthorButtonText(_: Void = ()) -> String {
        return NSLocalizedString("PhotoDetailAuthorButtonText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pagina do Post
      /// 
      /// Locales: en
      static func photoDetailPostButtonText(_: Void = ()) -> String {
        return NSLocalizedString("PhotoDetailPostButtonText", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Pic Sum
      /// 
      /// Locales: en
      static func homeTitle(_: Void = ()) -> String {
        return NSLocalizedString("HomeTitle", bundle: R.hostingBundle, comment: "")
      }
      
      /// en translation: Sucesso
      /// 
      /// Locales: en
      static func titleSuccess(_: Void = ()) -> String {
        return NSLocalizedString("TitleSuccess", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    struct _HomeCollectionViewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HomeCollectionViewCell
      
      let bundle = R.hostingBundle
      let identifier = "HomeCollectionViewCell"
      let name = "HomeCollectionViewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HomeCollectionViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HomeCollectionViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _HomeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "HomeViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoDetailViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoDetailViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
